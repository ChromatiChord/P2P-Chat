{"version":3,"sources":["../node_modules/react-peer/node_modules/peerjs/dist sync","Components/Messages.jsx","Components/FirstRenderCheck.jsx","Components/Login.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Messages","props","ownID","sha224","peerID","useState","messageList","setMessageList","message","setMessage","usePeerState","brokerId","setSendState","useReceivePeerState","receiveState","firstRender","useRef","useEffect","current","useFirstRender","console","log","concat","TextField","label","onChange","target","value","Button","variant","onClick","new_message","sendMessage","map","messageItem","Login","navigate","useNavigate","Typography","sx","fontFamily","margin","helperText","marginTop","App","setownID","partnerID","setPartnerID","isLogged","setIsLogged","exact","path","element","replace","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2496603.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 75;","import { TextField, Button } from '@mui/material'\r\nimport { usePeerState, useReceivePeerState } from 'react-peer';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { sha224 } from 'js-sha256';\r\nimport { useFirstRender } from './FirstRenderCheck';\r\n\r\nfunction Messages(props) {\r\n\r\n  const ownID = sha224(props[\"ownID\"]+props[\"partnerID\"]);\r\n  const peerID = sha224(props[\"partnerID\"]+props[\"ownID\"]);\r\n  const [messageList, setMessageList] = useState([]);\r\n\r\n  const [message, setMessage] = useState(\"Message\");\r\n  function updateMessage(e) {\r\n    setMessage(e.target.value);\r\n  }\r\n  const [sendState, setSendState, brokerID, connections, ownError] = usePeerState({\r\n    \"senderID\": \"setup\",\r\n    \"message\": \"\"\r\n  }, {brokerId: ownID});\r\n  \r\n  function sendMessage() {\r\n    const new_message = {\r\n      \"senderID\": props[\"ownID\"],\r\n      \"message\": message\r\n    }\r\n    setSendState(new_message);\r\n    setMessageList(messageList.concat([new_message]));\r\n\r\n  }\r\n\r\n  const [receiveState, isConnected, peerError] = useReceivePeerState(peerID);\r\n  const firstRender = useFirstRender();\r\n\r\n  useEffect(() => {\r\n    if (!firstRender) {\r\n      if (receiveState[\"senderID\"] !== \"setup\") {\r\n        console.log(\"Recieved Message:\");\r\n        console.log(receiveState);\r\n        setMessageList(messageList.concat([{\r\n          \"senderID\": receiveState[\"senderID\"],\r\n          \"message\": receiveState[\"message\"]\r\n        }]));\r\n      }\r\n    }\r\n  }, [receiveState])\r\n\r\n  return (\r\n    <center>          \r\n      Talking to: {props[\"partnerID\"]}\r\n      <br/>\r\n      As: {props[\"ownID\"]}\r\n      <br/>\r\n      <TextField\r\n          id=\"outlined-helperText\"\r\n          label=\"Message\"\r\n          onChange={updateMessage}\r\n        />\r\n      <br/><br/>\r\n      <Button variant=\"outlined\" onClick={() => sendMessage()}>Send Message</Button>\r\n      {/* {JSON.stringify(messageList)} */}\r\n      {messageList.map(messageItem => \r\n        <div>\r\n          {messageItem[\"senderID\"]}: {messageItem[\"message\"]}\r\n        </div>\r\n      )}\r\n    </center>\r\n  )\r\n}\r\n\r\nexport default Messages;","import { useRef, useEffect } from 'react';\r\n\r\n// used to confirm that the current render isn't the first render\r\nexport function useFirstRender() {\r\n  const firstRender = useRef(true);\r\n\r\n  useEffect(() => {\r\n    firstRender.current = false;\r\n  }, []);\r\n\r\n  return firstRender.current;\r\n}","import { useNavigate } from 'react-router-dom';\r\nimport { TextField, Button, Typography, Box } from '@mui/material';\r\n\r\nfunction Login(props) {\r\n  function updateOwnID(e) {\r\n    props[\"setownID\"](e.target.value);\r\n  }\r\n  function updatePartnerID(e) {\r\n    props[\"setPartnerID\"](e.target.value);\r\n  }\r\n\r\n  const navigate = useNavigate();\r\n  function establishConnection() {\r\n    props[\"setIsLogged\"](true);\r\n    navigate(\"/P2PChat/message\");\r\n  }\r\n  \r\n  return (\r\n    <center>\r\n      <Typography \r\n      variant=\"h2\"\r\n      sx={{\r\n        fontFamily: \"Roboto\",\r\n        margin: \"14px\"\r\n      }}\r\n      >Peer 2 Peer Chat</Typography> \r\n      <Typography\r\n      sx={{\r\n        fontFamily: \"Roboto\"\r\n      }}\r\n      >A simple peer to peer chat app. {<br/>} \r\n      Both you and your peer can choose any name you wish, share those names {<br/>} \r\n      with each other, and connect over a secure two way connection to chat!</Typography>\r\n      <TextField\r\n          id=\"outlined-helperText\"\r\n          label=\"Your Username\"\r\n          helperText=\"(Share this with your peer)\"\r\n          onChange={updateOwnID}\r\n          sx={{marginTop: \"20px\"}}\r\n        />\r\n      <br/>\r\n      <TextField\r\n          id=\"outlined-helperText\"\r\n          label=\"Peer Username\"\r\n          helperText=\"(Username you wish to connect to)\"\r\n          onChange={updatePartnerID}\r\n          sx={{margin: \"14px\"}}\r\n        />\r\n      <br/>\r\n      <Button variant=\"outlined\" onClick={() => establishConnection()}>Establish Connection</Button>\r\n    </center>\r\n  )\r\n}\r\n\r\nexport default Login;\r\n","import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport { TextField, Button } from '@mui/material'\nimport { usePeerState, useReceivePeerState } from 'react-peer';\nimport { useState, useEffect, useCallback} from 'react'  \nimport Messages from './Components/Messages';\nimport Login from './Components/Login';\n\nconst App = () => {\n  const [ownID, setownID] = useState(\"Partner ID\");\n  const [partnerID, setPartnerID] = useState(\"Own ID\");\n  const [isLogged, setIsLogged] = useState(false);\n\n  return (\n    <Router>      \n        <Routes>\n          <Route exact path=\"/P2PChat\" element={<Login {...{ownID, setownID, partnerID, setPartnerID, setIsLogged}}/>}/>\n          <Route path=\"/P2PChat/message\" element={!isLogged ? <Navigate replace to={\"/P2PChat\"}/> : <Messages {...{ownID, partnerID}}/>}/>\n          <Route path=\"*\" element={<Navigate replace to={!isLogged ? \"/P2PChat\" : \"/P2PChat/message\"}/>}/>\n        </Routes>\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}